{"version":3,"sources":["components/Header/Haeder.js","components/Toogler/Switcher.js","components/TodoItem/TodoItem.js","components/Todolist/TodoList.js","components/Footer/Footer.js","App.js","index.js"],"names":["Header","state","placeholder","inputValue","handleSetTodoValue","e","_this","setState","target","value","handleSubmit","preventDefault","valueTodo","props","addTodo","react_default","a","createElement","onSubmit","this","onChange","className","Component","Switcher","_ref","todos","topToggle","Fragment","event","checked","type","id","length","htmlFor","TodoItem","todoItem","todo","done","label","TodoList","setDoneStatus","destroyTodo","map","key","TodoItem_TodoItem","onClick","Footer","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","ActiveBtn","filterTypes","all","_this2","_this$props","TodosDone","setFilters","clearCompleted","filterButtons","values","item","href","FILTER_TYPES","active","completed","App","currentFilter","prevState","createTodo","concat","toConsumableArray","objectSpread2","filter","ActiveTodoCounter","some","_this$state","Haeder_Header","Toogler_Switcher","Todolist_TodoList","renderTodos","Footer_Footer","Date","getTime","ReactDOM","render","App_App","document","getElementById"],"mappings":"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","file":"static/js/main.87a15ca1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Header extends Component {\n  state = {\n    placeholder: 'What needs to be done?',\n    inputValue: '',\n  };\n\n  handleSetTodoValue = (e) => {\n    this.setState({\n      inputValue: e.target.value,\n    });\n  };\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n    const { inputValue } = this.state;\n\n    if (inputValue === '') {\n      this.setState({\n        placeholder: 'YOU HAVE TO INPUT TODO',\n      });\n\n      return;\n    }\n\n    const valueTodo = this.state.inputValue;\n\n    this.props.addTodo(valueTodo);\n    this.setState({\n      inputValue: '',\n      placeholder: 'What needs to be done?',\n    });\n  };\n\n  render() {\n    return (\n      <form onSubmit={this.handleSubmit}>\n        <input\n          onChange={this.handleSetTodoValue}\n          value={this.state.inputValue}\n          className=\"new-todo\"\n          placeholder={this.state.placeholder}\n        />\n      </form>\n    );\n  }\n}\nHeader.propTypes = {\n  addTodo: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Switcher({ todos, topToggle }) {\n  return (\n    <div>\n      <>\n        <input\n          onChange={event => topToggle(event.target.checked)}\n          type=\"checkbox\"\n          id=\"toggle-all\"\n          className=\"toggle-all\"\n          value=\"toggle-all\"\n        />\n        {todos.length > 0 && (\n          <label htmlFor=\"toggle-all\">Mark all as complete</label>\n        )}\n      </>\n\n    </div>\n  );\n}\n\nexport default Switcher;\n\nSwitcher.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  topToggle: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction TodoItem({ todoItem }) {\n  const todo = todoItem.done\n    ? <s>{todoItem.label}</s>\n    : <>{todoItem.label}</>;\n\n  return (\n    <label htmlFor=\"todo-1\">{todo}</label>\n  );\n}\n\nexport default TodoItem;\n\nTodoItem.propTypes = {\n  todoItem: PropTypes.shape({\n    label: PropTypes.string.isRequired,\n    id: PropTypes.number.isRequired,\n  }).isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TodoItem from '../TodoItem/TodoItem';\n\nfunction TodoList({ todos, setDoneStatus, destroyTodo }) {\n  return (\n\n    <ul className=\"todo-list\">\n      {todos.map(todo => (\n        <li key={todo.id}>\n          <div className=\"view\">\n            <input\n              onChange={() => setDoneStatus(todo.id)}\n              type=\"checkbox\"\n              className=\"toggle\"\n              id={todo.id}\n              checked={todo.done}\n            />\n            <TodoItem todoItem={todo} />\n            <button\n              onClick={() => destroyTodo(todo.id)}\n              type=\"button\"\n              className=\"destroy\"\n            />\n          </div>\n          <input type=\"text\" className=\"edit\" />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default TodoList;\n\nTodoList.propTypes = {\n  todos: PropTypes.arrayOf(PropTypes.object).isRequired,\n  setDoneStatus: PropTypes.func.isRequired,\n  destroyTodo: PropTypes.func.isRequired,\n};\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport default class Footer extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n\n      ActiveBtn: this.props.filterTypes.all,\n    };\n  }\n\n  render() {\n    const { ActiveBtn } = this.state;\n    const { length,\n      TodosDone,\n      setFilters,\n      filterTypes,\n      clearCompleted } = this.props;\n\n    const filterButtons = Object.values(filterTypes).map(item => (\n      <li key={item}>\n        <a\n          className={ActiveBtn === item ? 'selected' : ''}\n          href=\"./#\"\n          onClick={() => {\n            setFilters(item);\n            this.setState({\n              ActiveBtn: item,\n            });\n          }}\n        >\n          {item}\n        </a>\n      </li>\n    ));\n\n    return (\n\n      <div>\n        {length > 0\n        && (\n          <footer className=\"footer\">\n            <span className=\"todo-count\">\n              {length - TodosDone()}\n              : items not finished\n              <br />\n\n            </span>\n\n            <ul className=\"filters\">\n              {filterButtons}\n            </ul>\n            {TodosDone() > 0 && (\n              <button\n                id=\"clearCompleted\"\n                onClick={() => {\n                  clearCompleted();\n                }}\n                type=\"button\"\n                className=\"clear-completed\"\n              >\n              Clear completed\n              </button>\n            ) }\n          </footer>\n        )\n        }\n      </div>\n    );\n  }\n}\nFooter.propTypes = {\n  length: PropTypes.number.isRequired,\n  TodosDone: PropTypes.func.isRequired,\n  setFilters: PropTypes.func.isRequired,\n  filterTypes: PropTypes.objectOf(PropTypes).isRequired,\n  clearCompleted: PropTypes.func.isRequired,\n\n};\n","import React, { Component } from 'react';\nimport Header from './components/Header/Haeder';\nimport Switcher from './components/Toogler/Switcher';\nimport TodoList from './components/Todolist/TodoList';\nimport Footer from './components/Footer/Footer';\n\nconst FILTER_TYPES = {\n  all: 'All',\n  active: 'Active',\n  completed: 'Completed',\n\n};\n\nexport default class App extends Component {\n  static createTodo(label) {\n    return {\n      id: new Date().getTime(),\n      label,\n      done: false,\n    };\n  }\n\n  state = {\n    todos: [],\n    currentFilter: FILTER_TYPES.all,\n\n  };\n\n  addTodo = (label) => {\n    this.setState((prevState) => {\n      const todo = App.createTodo(label);\n\n      return {\n        todos: [...prevState.todos, todo],\n      };\n    });\n  };\n\n  setDoneStatus = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.map((todo) => {\n        if (id === todo.id) {\n          return {\n            ...todo,\n            done: !todo.done,\n          };\n        }\n\n        return todo;\n      }),\n    }));\n  };\n\n  destroyTodo = (id) => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => todo.id !== id),\n    }));\n  };\n\n  ActiveTodoCounter = () => this.state.todos.filter(todo => todo.done).length;\n\n  topToggle = () => {\n    if (this.state.todos.some(todo => todo.done)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          done: false,\n        })),\n      }));\n    }\n\n    if (this.state.todos.some(todo => !todo.done)) {\n      this.setState(prevState => ({\n        todos: prevState.todos.map(todo => ({\n          ...todo,\n          done: true,\n        })),\n      }));\n    }\n  };\n\n  clearCompleted = () => {\n    this.setState(prevState => ({\n      todos: prevState.todos.filter(todo => !todo.done),\n    }));\n  };\n\n  setFilters = (item) => {\n    switch (item) {\n      case FILTER_TYPES.all:\n        this.setState({\n          currentFilter: FILTER_TYPES.all,\n        });\n        break;\n      case FILTER_TYPES.active:\n        this.setState({\n          currentFilter: FILTER_TYPES.active,\n        });\n        break;\n      case FILTER_TYPES.completed:\n        this.setState({\n          currentFilter: FILTER_TYPES.completed,\n        });\n        break;\n\n      default:\n    }\n  };\n\n  render() {\n    const { todos, currentFilter } = this.state;\n\n    const renderTodos = () => {\n      switch (currentFilter) {\n        case FILTER_TYPES.active:\n\n          return todos.filter(todo => !todo.done);\n        case FILTER_TYPES.completed:\n\n          return todos.filter(todo => todo.done);\n\n        default:\n          return todos;\n      }\n    };\n\n    return (\n      <section className=\"todoapp\">\n        <header className=\"header\">\n          <h1>todos</h1>\n          <Header addTodo={this.addTodo} />\n        </header>\n\n        <section className=\"main\">\n\n          <Switcher\n            todos={todos}\n            topToggle={this.topToggle}\n          />\n\n          <TodoList\n            todos={renderTodos()}\n            setDoneStatus={this.setDoneStatus}\n            destroyTodo={this.destroyTodo}\n          />\n\n        </section>\n\n        <Footer\n          clearCompleted={this.clearCompleted}\n          length={todos.length}\n          filterTypes={FILTER_TYPES}\n          setFilters={this.setFilters}\n          TodosDone={this.ActiveTodoCounter}\n        />\n\n      </section>\n    );\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './base.css';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}